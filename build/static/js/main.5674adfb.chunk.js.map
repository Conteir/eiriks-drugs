{"version":3,"sources":["api.ts","config.ts","store/CodeSystemStore.ts","store/SynonymStore.ts","store/ConceptStore.ts","store/BranchStore.ts","store/IntendedSiteStore.ts","store/FormStore.ts","store/ReleaseStore.ts","store/AdminStore.ts","components/Loading.tsx","components/Synonym.tsx","components/Concept.tsx","components/Error.tsx","components/Header.tsx","components/DrugListComponent.jsx","components/DrugAutoSuggest.jsx","pages/Search.tsx","App.tsx","index.tsx"],"names":["apiOptions","headers","Accept","method","handleResponse","response","ok","json","Promise","reject","Error","hosts","codeSystems","languages","fetchCodeSystems","host","conceptId","all","map","id","branch","url","URL","searchParams","set","fetch","toString","then","fetchSynonyms","fetchConcepts","query","append","fetchBranches","branches","filter","containsContent","fetchIntendedSites","conceptIdSubstance","fetchConceptIdSite","fetchForms","fetchReleases","fetchRelId","fetchAdms","fetchAdmId","Loading","className","role","Synonym","preferredTerm","useAsync","result","items","synonyms","type","lang","includes","term","descriptionId","key","Concept","fullySpecifiedName","request","scope","loading","children","Header","link","to","DrugListComponent","props","getDrugs","genericUrl","console","log","data","promises","Array","isArray","forEach","item","promise","commercialUrl","commercialItems","push","setState","JSON","stringify","state","index","additionalFields","NavnFormStyrke","href","ATCKode","this","parse","pt","renderCommercial","onClick","renderDrugs","React","Component","DrugAutoSuggest","getSuggestionValue","suggestion","suggestCallback","concept","renderSuggestion","onSuggestionsFetchRequested","value","inputValue","trim","toLowerCase","length","el","suggestions","onSuggestionsClearRequested","onChange","event","newValue","inputProps","Search","useQueryParam","StringParam","setQuery","setHost","setBranch","intendedSite","setIntendedSite","form","setForm","rel","setRel","adm","setAdm","setConceptIdSubstance","debouncedSearch","useConstant","debounce","searchRequest","a","useSearch","branchRequest","useEffect","path","find","b","intededSiteRequest","is","adminRequest","relRequest","r","formRequest","f","doseFormModificator","fetchGenericUrl","fetchCommercial","error","message","onSubmit","preventDefault","htmlFor","target","hostname","autoComplete","aria-labelledby","fsn","defaultValue","disabled","App","URLSearchParams","useLocation","search","get","ReactDOM","render","ReactRouterRoute","Route","document","getElementById"],"mappings":"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","file":"static/js/main.5674adfb.chunk.js","sourcesContent":["const headers = {\n  Accept: \"application/json\",\n  \"Accept-Language\": \"nb-NO,no,nb;q=0.9,nn;q=0.8,en-US;q=0.7,en-GB;q=0.6\",\n  \"Content-Type\": \"application/json\",\n};\n\nexport const apiOptions: RequestInit = {\n  headers,\n  method: \"GET\",\n};\n\nexport const handleResponse = <T>(response: Response) =>\n  response.ok\n    ? (response.json() as Promise<T>)\n    : Promise.reject(new Error(\"Failed to load data from server\"));\n","export const defaultBranch = \"MAIN/SNOMEDCT-NO\";\n\nexport const hosts = [\n  \"https://test.terminologi.ehelse.no\",\n  \"https://qa.terminologi.ehelse.no\",\n  \"https://terminologi.ehelse.no\",\n];\n\nexport const codeSystems = [];\n\nexport const referenceSets = [\n  {\n    id: \"\",\n    title: \"[Not specified]\",\n  },\n  {\n    id: \"816210007\",\n    title: \"MedDRA\",\n  },\n];\n\nexport const limit = \"3\"; //10\n\nexport const languages = [\"nb-NO\", \"nb\", \"nn\", \"no\"];\n\nexport const defaultConceptIdSubstance = \"387264003\"; //Diazepam hardcode\n\nexport const fetchConceptIdSite = (\n  conceptIdSubstance: string = defaultConceptIdSubstance,\n) =>\n  \"/concepts?ecl=<<736479009:R736474004=(*:R411116001=(<<763158003:762949000=(\" +\n  conceptIdSubstance +\n  \" OR (<<261217004:738774007=\" +\n  conceptIdSubstance +\n  \"))))\";\n\nexport const fetchFormId = \"/concepts?ecl=%3C736478001%20Minus%20%3C!736478001\";\n\nexport const fetchRelId = (\n  conceptIdSubstance: string = defaultConceptIdSubstance,\n) =>\n  \"/concepts?ecl=%3C%3C736480007%3A%20R736475003%3D(*%3AR411116001%3D(%3C%3C763158003%3A762949000%3D(\" +\n  conceptIdSubstance +\n  \"%20OR%20(%3C%3C261217004%3A738774007%3D\" +\n  conceptIdSubstance +\n  \"))))\";\n\nexport const fetchAdmId = (\n  conceptIdSubstance: string = defaultConceptIdSubstance,\n) =>\n  \"/concepts?ecl=%3C%3C736665006%3A%20R736472000%3D(*%3AR411116001%3D(%3C%3C763158003%3A762949000%3D(\" +\n  conceptIdSubstance +\n  \"%20OR%20(%3C%3C261217004%3A738774007%3D\" +\n  conceptIdSubstance +\n  \"))))\";\n","import { apiOptions, handleResponse } from \"../api\";\nimport { codeSystems, limit } from \"../config\";\n\ninterface IFields {\n  mapAdvice: string;\n  mapTarget: string;\n}\n\ninterface ICodeSystem {\n  internalId: string;\n  refsetId: string;\n  additionalFields: Readonly<IFields>;\n}\n\ninterface ICodeSystemResult {\n  items: ICodeSystem[];\n}\n\nexport const fetchCodeSystems = (host: string, conceptId: string) =>\n  Promise.all(\n    codeSystems.map(({ id, branch }) => {\n      const url = new URL(`browser/${branch}/members`, host);\n      url.searchParams.set(\"limit\", limit);\n      url.searchParams.set(\"active\", \"true\");\n      url.searchParams.set(\"referenceSet\", id);\n      url.searchParams.set(\"referencedComponentId\", conceptId);\n      return fetch(url.toString(), apiOptions).then((response) =>\n        handleResponse<ICodeSystemResult>(response),\n      );\n    }),\n  );\n","import { apiOptions, handleResponse } from \"../api\";\nimport { limit } from \"../config\";\n\ninterface IDescription {\n  term: string;\n  type: string;\n  lang: string;\n  descriptionId: string;\n}\n\ninterface ISynonymResult {\n  items: IDescription[];\n}\n\nexport const fetchSynonyms = (\n  host: string,\n  branch: string,\n  conceptId: string,\n) => {\n  const url = new URL(`${branch}/descriptions`, host);\n  url.searchParams.set(\"conceptId\", conceptId);\n  url.searchParams.set(\"offset\", \"0\");\n  url.searchParams.set(\"limit\", limit);\n  return fetch(url.toString(), apiOptions).then((response) =>\n    handleResponse<ISynonymResult>(response),\n  );\n};\n","import { apiOptions, handleResponse } from \"../api\";\nimport { limit } from \"../config\";\n\ninterface ITerm {\n  term: string;\n}\n\ninterface IConcept {\n  conceptId: string;\n  fsn: Readonly<ITerm>;\n  pt: Readonly<ITerm>;\n}\n\ninterface IDescription {\n  concept: Readonly<IConcept>;\n}\n\nexport interface IConceptResult {\n  totalElements: number;\n  items: IDescription[];\n}\n\nexport const fetchConcepts = (host: string, branch: string, query: string) => {\n  const url = new URL(`browser/${branch}/descriptions`, host);\n  url.searchParams.set(\"limit\", limit);\n  url.searchParams.set(\"active\", \"true\");\n  url.searchParams.set(\"groupByConcept\", \"true\");\n  url.searchParams.set(\"language\", \"no\");\n  url.searchParams.append(\"language\", \"nb-NO\");\n  url.searchParams.append(\"language\", \"nb\");\n  url.searchParams.append(\"language\", \"nn\");\n  url.searchParams.append(\"language\", \"en\");\n  url.searchParams.set(\"conceptActive\", \"true\");\n  url.searchParams.set(\"conceptActive\", \"true\");\n  url.searchParams.set(\"semanticTag\", \"substance\");\n  url.searchParams.set(\"term\", query);\n  return fetch(url.toString(), apiOptions).then((response) =>\n    handleResponse<IConceptResult>(response),\n  );\n};\n","import { apiOptions, handleResponse } from \"../api\";\n\nexport interface IBranch {\n  path: string;\n  containsContent: boolean;\n}\n\ntype Branches = IBranch[];\n\nexport const fetchBranches = (host: string) => {\n  const url = new URL(`branches`, host);\n  return fetch(url.toString(), apiOptions)\n    .then((response) => handleResponse<Branches>(response))\n    .then((branches: Branches) =>\n      branches.filter(({ containsContent }) => containsContent),\n    );\n};\n\n","import { apiOptions, handleResponse } from \"../api\";\nimport { fetchConceptIdSite } from \"../config\";\n\n//definisjon av objekt. Egneskaper. I = interface = \"kontakt\"\nexport interface IIntendedSite {\n  conceptId: string;\n  pt: { term: string };\n}\n//array av objekter\ninterface IIntendedSites {\n  items: IIntendedSite[];\n}\n\nexport const fetchIntendedSites = (\n  host: string,\n  branch: string,\n  conceptIdSubstance: string,\n) => {\n  const url = new URL(\n    `${branch + fetchConceptIdSite(conceptIdSubstance)}`,\n    host,\n  );\n  return fetch(url.toString(), apiOptions).then((response) =>\n    handleResponse<IIntendedSites>(response),\n  );\n};\n","import { apiOptions, handleResponse } from \"../api\";\nimport { fetchFormId } from \"../config\";\n\nexport interface IForm {\n  conceptId: string;\n  pt: { term: string };\n}\ninterface IForms {\n  items: IForm[];\n}\n\nexport const fetchForms = (host: string, branch: string) => {\n  const url = new URL(`${branch + fetchFormId}`, host);\n  return fetch(url.toString(), apiOptions).then((response) =>\n    handleResponse<IForms>(response),\n  );\n};\n","import { apiOptions, handleResponse } from \"../api\";\nimport { fetchRelId } from \"../config\";\n\n//definisjon av objekt. Egneskaper. I = interface = \"kontakt\"\nexport interface IRel {\n  conceptId: string;\n  pt: { term: string };\n}\n//array av objekter\ninterface IRels {\n  items: IRel[];\n}\n\nexport const fetchReleases = (\n  host: string,\n  branch: string,\n  conceptIdSubstance: string,\n) => {\n  const url = new URL(`${branch + fetchRelId(conceptIdSubstance)}`, host);\n  return fetch(url.toString(), apiOptions).then((response) =>\n    handleResponse<IRels>(response),\n  );\n};\n","import { apiOptions, handleResponse } from \"../api\";\nimport { fetchAdmId } from \"../config\";\n\n//definisjon av objekt. Egneskaper. I = interface = \"kontakt\"\nexport interface IAdm {\n  conceptId: string;\n  pt: { term: string };\n}\n//array av objekter\ninterface IAdms {\n  items: IAdm[];\n}\n\nexport const fetchAdms = (\n  host: string,\n  branch: string,\n  conceptIdSubstance: string,\n) => {\n  const url = new URL(`${branch + fetchAdmId(conceptIdSubstance)}`, host);\n  return fetch(url.toString(), apiOptions).then((response) =>\n    handleResponse<IAdms>(response),\n  );\n};\n","import React from \"react\";\nimport \"./Loading.css\";\n\nconst Loading = () => (\n  <div className=\"spinner-border loading text-secondary\" role=\"status\">\n    <span className=\"sr-only\">Loading...</span>\n  </div>\n);\n\nexport default Loading;\n","import React from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport { languages } from \"../config\";\nimport { fetchSynonyms } from \"../store\";\n\ntype SynonymProps = {\n  host: string;\n  branch: string;\n  preferredTerm: string;\n  conceptId: string;\n};\n\nconst Synonym = ({ host, branch, preferredTerm, conceptId }: SynonymProps) => {\n  const request = useAsync(fetchSynonyms, [host, branch, conceptId]);\n\n  const { items: synonyms = [] } = request.result || {};\n\n  return (\n    <>\n      {synonyms\n        .filter(({ type }) => type === \"SYNONYM\")\n        .filter(({ lang }) => languages.includes(lang))\n        .filter(({ term }) => term !== preferredTerm)\n        .map(({ term, descriptionId: id }) => (\n          <p key={id}>{term}</p>\n        ))}\n    </>\n  );\n};\n\nexport default Synonym;\n","import React from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport { fetchCodeSystems } from \"../store\";\nimport Loading from \"./Loading\";\nimport Synonym from \"./Synonym\";\n\ntype ConceptProps = {\n  host: string;\n  branch: string;\n  preferredTerm: string;\n  fullySpecifiedName: string;\n  conceptId: string;\n  scope: string;\n};\n\nconst Concept = ({\n  host,\n  branch,\n  preferredTerm,\n  fullySpecifiedName,\n  conceptId,\n  scope,\n}: ConceptProps) => {\n  const request = useAsync(fetchCodeSystems, [host, conceptId]);\n\n  return (\n    <div className=\"d-md-flex justify-content-between\">\n      <div>\n        <p>{preferredTerm}</p>\n        <Synonym\n          host={host}\n          branch={branch}\n          conceptId={conceptId}\n          preferredTerm={preferredTerm}\n        />\n      </div>\n      <dl className=\"mb-md-0 ml-md-5\">\n        <dd className=\"mb-md-0\">{conceptId}</dd>\n      </dl>\n      {request.loading && <Loading />}\n    </div>\n  );\n};\n\nexport default Concept;\n","import React from \"react\";\n\ntype ErrorProps = {\n  children: string;\n};\n\nconst Error = ({ children }: ErrorProps) => (\n  <div className=\"alert alert-danger d-inline-block\" role=\"alert\">\n    {children}\n  </div>\n);\n\nexport default Error;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ntype HeaderProps = {\n  scope: string;\n};\n\nconst Header = ({ scope }: HeaderProps) => {\n  const itemClassNames = (link: string) => {\n    if (link === scope) {\n      return \"nav-item active\";\n    }\n    return \"nav-item\";\n  };\n  return (\n    <header className=\"row\">\n      <div>\n        <h1>SNOMED CT legemiddelsøk</h1>\n      </div>\n      <div className=\"col\">\n        <nav className=\"navbar navbar-expand mb-3\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className={itemClassNames(\"\")}>\n              <Link className=\"nav-link\" to=\"/\">\n                Resett\n              </Link>\n            </li>\n\n            {false && (\n              <li className={itemClassNames(\"helsenorge\")}>\n                <Link className=\"nav-link\" to=\"/?scope=helsenorge\">\n                  Helsenorge\n                </Link>\n              </li>\n            )}\n          </ul>\n        </nav>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nexport const DrugListComponent = class DrugListComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      response: \"\",\n    };\n  }\n\n  getDrugs = () => {\n    if (this.props.genericUrl) {\n      console.log(this.props.genericUrl);\n      fetch(this.props.genericUrl, {\n        method: \"GET\",\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          let promises = [];\n\n          if (Array.isArray(data.items)) {\n            data.items.forEach((item) => {\n              let promise = fetch(this.props.commercialUrl + item.conceptId, {\n                method: \"GET\",\n              })\n                .then((response) => response.json())\n                .then((data) => {\n                  if (Array.isArray(data.items)) {\n                    item.commercialItems = data.items;\n                  }\n                });\n              promises.push(promise);\n            });\n          }\n\n          Promise.all(promises).then(() => {\n            this.setState({\n              response: JSON.stringify(data, null, 2),\n            });\n          });\n        });\n    }\n  };\n\n  renderCommercial(commercialItems) {\n    return commercialItems.map((item, index) => (\n      <li key={index}>\n        <div>\n          Commercial drug <span>{index + 1}</span>:{\" \"}\n          <span>\n            {item.additionalFields.NavnFormStyrke}{\" \"}\n            <a\n              href={\n                \"https://www.legemiddelsok.no/sider/default.aspx?searchquery=\" +\n                item.additionalFields.ATCKode +\n                \"&f=Han;MtI;Vir;ATC;Var;Mar;Mid;Avr;gen;par;&pane=0\"\n              }\n            >\n              Legemiddelsøk\n            </a>\n          </span>{\" \"}\n        </div>\n      </li>\n    ));\n  }\n\n  renderDrugs() {\n    if (this.state.response) {\n      let json = JSON.parse(this.state.response);\n      console.log(json);\n\n      if (Array.isArray(json.items)) {\n        return json.items.map((item, index) => (\n          <li key={index}>\n            <div>\n              Generic drug <span>{index + 1}</span>: <span>{item.pt.term}</span>{\" \"}\n              <span>{item.conceptId}</span>\n            </div>\n            {Array.isArray(item.commercialItems) ? (\n              <ul>{this.renderCommercial(item.commercialItems)}</ul>\n            ) : null}\n          </li>\n        ));\n      }\n    }\n    return null;\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <button onClick={this.getDrugs}>Søk etter legemiddel</button>\n        </div>\n        <div>\n          <ul>{this.renderDrugs()}</ul>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default DrugListComponent;\n","import React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport '../components/DrugAutoSuggest.css';\n\nexport const DrugAutoSuggest = class DrugAutoSuggest extends React.Component {\n  constructor() {\n    super();\n\n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n  \n  // When suggestion is clicked, Autosuggest needs to populate the input\n  // based on the clicked suggestion. Teach Autosuggest how to calculate the\n  // input value for every given suggestion.\n    getSuggestionValue = (suggestion) => {\n        this.props.suggestCallback(suggestion.concept.conceptId);\n        return suggestion.term;\n    }\n  \n  // Use your imagination to render suggestions.\n    renderSuggestion = (suggestion) => (\n    <div>\n      {suggestion.term}\n    </div>\n  );\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    const inputValue = value.trim().toLowerCase();\n\n    if(inputValue && inputValue.length >= 3) {\n        let url = this.props.host + '/browser/' + this.props.branch + '/descriptions?'\n        + 'limit=10&active=true&groupByConcept=true'\n        + '&language=no&language=nb-NO&language=nb&language=nn&language=en'\n        + '&conceptActive=true&semanticTag=substance&term=' + value;\n\n        fetch(url,\n            {\n                method: 'GET'\n            }\n        )\n        .then(response => response.json())\n        .then(data => {\n            if(Array.isArray(data.items)) {\n                let items = [];\n\n                data.items.forEach(el => {\n                    if(el.term && el.term.length > 0) items.push(el);\n                });\n                \n                this.setState({\n                    suggestions: items\n                });\n            }\n        });\n    } else {\n        this.setState({\n            suggestions: []\n        });\n    }\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      value,\n      onChange: this.onChange\n    };\n\n    // Finally, render it!\n    return (\n        <div>\n            <Autosuggest\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={this.getSuggestionValue}\n                renderSuggestion={this.renderSuggestion}\n                inputProps={inputProps}\n            />\n        </div>\n    );\n  }\n}\n\nexport default DrugAutoSuggest;","import debounce from \"awesome-debounce-promise\";\nimport React, { ChangeEvent, FormEvent, useEffect } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport useConstant from \"use-constant\";\nimport { StringParam, useQueryParam } from \"use-query-params\";\nimport Concept from \"../components/Concept\";\nimport Error from \"../components/Error\";\nimport Header from \"../components/Header\";\nimport Loading from \"../components/Loading\";\nimport DrugListComponent from \"../components/DrugListComponent\";\nimport DrugAutoSuggest from \"../components/DrugAutoSuggest\";\nimport { defaultBranch, hosts, defaultConceptIdSubstance } from \"../config\";\nimport {\n  fetchBranches,\n  fetchIntendedSites,\n  fetchReleases,\n  fetchForms,\n  fetchAdms,\n  fetchConcepts,\n  IConceptResult,\n} from \"../store\";\n\ntype SearchProps = {\n  scope: string;\n};\nconst useSearch = () => {\n  // Handle the input text state\n  const [query, setQuery] = useQueryParam(\"q\", StringParam);\n  const [host, setHost] = useQueryParam(\"h\", StringParam);\n  const [branch, setBranch] = useQueryParam(\"b\", StringParam);\n  const [intendedSite, setIntendedSite] = useQueryParam(\"is\", StringParam);\n  const [form, setForm] = useQueryParam(\"f\", StringParam);\n  const [rel, setRel] = useQueryParam(\"r\", StringParam);\n  const [adm, setAdm] = useQueryParam(\"a\", StringParam);\n  const [\n    conceptIdSubstance = defaultConceptIdSubstance,\n    setConceptIdSubstance,\n  ] = useQueryParam(\"s\", StringParam);\n\n  // Debounce the original search async function\n  const debouncedSearch = useConstant(() => debounce(fetchConcepts, 500));\n\n  const searchRequest = useAsync(async () => {\n    if (host && branch && query) {\n      return debouncedSearch(host, branch, query || \"\");\n    }\n    return ({} as any) as Readonly<IConceptResult>;\n  }, [query, branch, intendedSite, form, rel, adm]); // Ensure a new request is made everytime the text changes (even if it's debounced)\n\n  // Return everything needed for the hook consumer\n  return {\n    host,\n    branch,\n    query,\n    form,\n    rel,\n    adm,\n    intendedSite,\n    searchRequest,\n    conceptIdSubstance,\n    setConceptIdSubstance,\n    setBranch,\n    setHost,\n    setQuery,\n    setIntendedSite,\n    setForm,\n    setAdm,\n    setRel,\n  };\n};\n\nconst Search = ({ scope }: SearchProps) => {\n  const {\n    host,\n    branch,\n    setBranch,\n    setHost,\n    intendedSite,\n    setIntendedSite,\n    conceptIdSubstance,\n    setConceptIdSubstance,\n    rel,\n    setRel,\n    adm,\n    setAdm,\n    form,\n    setForm,\n    searchRequest,\n  } = useSearch();\n\n  const branchRequest = useAsync(fetchBranches, [host || hosts[0]]);\n\n  useEffect(() => {\n    if (branchRequest.result && !branch) {\n      const { path } =\n        branchRequest.result.find((b) => b.path === defaultBranch) || {};\n      if (path) {\n        setBranch(path);\n      }\n    }\n  }, [branch, branchRequest, setBranch]);\n\n  const intededSiteRequest = useAsync(fetchIntendedSites, [\n    host || hosts[0],\n    branch || defaultBranch,\n    conceptIdSubstance,\n  ]);\n\n  useEffect(() => {\n    if (intededSiteRequest.result && !intendedSite) {\n      const { conceptId } =\n        intededSiteRequest.result.items.find((is) => is.conceptId === \"666\") ||\n        {};\n      if (conceptId) {\n        setIntendedSite(conceptId);\n      }\n    }\n  }, [intendedSite, intededSiteRequest, setIntendedSite]);\n\n  const adminRequest = useAsync(fetchAdms, [\n    host || hosts[0],\n    branch || defaultBranch,\n    conceptIdSubstance,\n  ]);\n\n  useEffect(() => {\n    if (adminRequest.result && !adm) {\n      const { conceptId } =\n        adminRequest.result.items.find((a) => a.conceptId === \"666\") || {};\n      if (conceptId) {\n        setAdm(conceptId);\n      }\n    }\n  }, [adm, adminRequest, setAdm]);\n  console.log(adm);\n\n  const relRequest = useAsync(fetchReleases, [\n    host || hosts[0],\n    branch || defaultBranch,\n    conceptIdSubstance,\n  ]);\n\n  useEffect(() => {\n    if (relRequest.result && !rel) {\n      const { conceptId } =\n        relRequest.result.items.find((r) => r.conceptId === \"666\") || {};\n      if (conceptId) {\n        setRel(conceptId);\n      }\n    }\n  }, [rel, relRequest, setRel]);\n\n  const formRequest = useAsync(fetchForms, [\n    host || hosts[0],\n    branch || defaultBranch,\n  ]);\n\n  useEffect(() => {\n    if (formRequest.result && !form) {\n      const { conceptId } =\n        formRequest.result.items.find((f) => f.conceptId === \"666\") || {};\n      if (conceptId) {\n        setForm(conceptId);\n      }\n    }\n  }, [form, formRequest, setForm]);\n\n  useEffect(() => {\n    if (!host) {\n      setHost(hosts[0]);\n    }\n  }, [host, setHost]);\n\n  const handleFormSubmit = (event: FormEvent) => {\n    event.preventDefault();\n  };\n\n  const handleHostChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setHost(event.target.value);\n  };\n  const handleBranchChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setBranch(event.target.value);\n  };\n\n  const handleIntendedSiteChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setIntendedSite(event.target.value);\n  };\n\n  const handleFormChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setForm(event.target.value);\n  };\n\n  const handleAdmChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setAdm(event.target.value);\n  };\n\n  const handleSubstanceChange = (conceptId: string) => {\n    setConceptIdSubstance(conceptId);\n  };\n\n  const handleRelChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setRel(event.target.value);\n  };\n\n  let doseFormModificator: string;\n  if (form === \"739006009\") {\n    doseFormModificator = \"736853009\";\n  } else {\n    doseFormModificator = \"*\";\n  }\n\n  const branches = branchRequest.result || [];\n  const { items = [] } = searchRequest.result || {};\n  const fetchGenericUrl =\n    (host || hosts[0]) +\n    \"/\" +\n    (branch || defaultBranch) +\n    \"/concepts?ecl=<<763158003:762949000=(\" +\n    conceptIdSubstance +\n    \" OR (<<105590001:738774007=\" +\n    conceptIdSubstance +\n    \")),411116001=((<<736542009:736475003=\" +\n    rel +\n    \",736472000=\" +\n    adm +\n    \",736474004=\" +\n    intendedSite +\n    \",736476002=\" +\n    form +\n    \") OR (<<736542009:736475003=\" +\n    rel +\n    \",736472000=\" +\n    adm +\n    \",736474004=\" +\n    intendedSite +\n    \",736476002=\" +\n    form +\n    \",736473005= \" +\n    doseFormModificator +\n    \"))\";\n  const fetchCommercial =\n    (host || hosts[0]) +\n    \"/browser/\" +\n    \"MAIN%2FSNOMEDCT-NO%2FREFSETS/members?referenceSet=6021000202106&referencedComponentId=\";\n\n  return (\n    <div className=\"container\">\n      <Header scope={scope} />\n      <div className=\"row mb-5\">\n        <div className=\"col-9 col-md-10\">\n          {branchRequest.error && <Error>{branchRequest.error.message}</Error>}\n          {!branchRequest.loading && !branchRequest.error && (\n            <form onSubmit={handleFormSubmit}>\n              <div className=\"form-row\">\n                {!scope && (\n                  <>\n                    <div className=\"col-12\">\n                      <div className=\"form-group\">\n                        <label htmlFor=\"host\">Host</label>\n                        <select\n                          id=\"host\"\n                          className=\"form-control\"\n                          value={host}\n                          onChange={handleHostChange}\n                        >\n                          {hosts.map((hostname) => (\n                            <option value={hostname} key={hostname}>\n                              {hostname}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n                    </div>\n\n                    <div className=\"col-md-12\">\n                      <div className=\"form-group\">\n                        <label htmlFor=\"branch\">Branch</label>\n                        <select\n                          id=\"branch\"\n                          className=\"form-control\"\n                          onChange={handleBranchChange}\n                        >\n                          {branches.map(({ path }) => (\n                            <option value={path} key={path}>\n                              {path}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n                    </div>\n                  </>\n                )}\n\n                <div className=\"col-md-12\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"query\">Substans</label>\n                    <DrugAutoSuggest\n                      host={host}\n                      branch={branch}\n                      suggestCallback={setConceptIdSubstance}\n                      onChange={handleSubstanceChange}\n                      autoComplete=\"off\"\n                    />\n                    <section aria-labelledby=\"results\">\n                      <ul className=\"list-group\">\n                        {items.map(\n                          ({\n                            concept: {\n                              conceptId,\n                              fsn: { term: fullySpecifiedName },\n                              pt: { term: preferredTerm },\n                            },\n                          }) => (\n                            <li\n                              key={conceptId}\n                              className=\"list-group-item mb-2\"\n                            >\n                              <Concept\n                                host={host || hosts[0]}\n                                branch={branch || \"\"}\n                                preferredTerm={preferredTerm}\n                                fullySpecifiedName={fullySpecifiedName}\n                                conceptId={conceptId}\n                                scope={scope}\n                              />\n                            </li>\n                          ),\n                        )}\n                      </ul>\n                    </section>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-md-3\">\n                    <div className=\"form-group\">\n                      <label htmlFor=\"Frigivelse\">Frigivelse:</label>\n                      <select\n                        defaultValue=\"\"\n                        id=\"rel\"\n                        className=\"form-control\"\n                        onChange={handleRelChange}\n                      >\n                        <option value=\"\" disabled>\n                          Velg\n                        </option>\n                        {relRequest.result &&\n                          relRequest.result.items.map(({ pt, conceptId }) => (\n                            <option value={conceptId} key={pt.term}>\n                              {pt.term}\n                            </option>\n                          ))}\n                      </select>\n                    </div>\n                  </div>\n\n                  <div className=\"col-md-3\">\n                    <div className=\"form-group\">\n                      <label htmlFor=\"admMetode\">Adm. metode</label>\n                      <select\n                        defaultValue=\"\"\n                        id=\"adm\"\n                        className=\"form-control\"\n                        onChange={handleAdmChange}\n                      >\n                        <option value=\"\" disabled>\n                          Velg\n                        </option>\n                        {adminRequest.result &&\n                          adminRequest.result.items.map(({ pt, conceptId }) => (\n                            <option value={conceptId} key={pt.term}>\n                              {pt.term}\n                            </option>\n                          ))}\n                      </select>\n                    </div>\n                  </div>\n                  <div className=\"col-md-3\">\n                    <div className=\"form-group\">\n                      <label htmlFor=\"intendedSite\">Intended site</label>\n                      <select\n                        defaultValue=\"\"\n                        id=\"conceptIdSite\"\n                        className=\"form-control\"\n                        onChange={handleIntendedSiteChange}\n                      >\n                        <option value=\"\" disabled>\n                          Velg\n                        </option>\n                        {intededSiteRequest.result &&\n                          intededSiteRequest.result.items.map(\n                            ({ pt, conceptId }) => (\n                              <option value={conceptId} key={pt.term}>\n                                {pt.term}\n                              </option>\n                            ),\n                          )}\n                      </select>\n                    </div>\n                  </div>\n                  <div className=\"col-md-3\">\n                    <div className=\"form-group\">\n                      <label htmlFor=\"form\">Form</label>\n\n                      <select\n                        defaultValue=\"\"\n                        id=\"form\"\n                        className=\"form-control\"\n                        onChange={handleFormChange}\n                      >\n                        <option value=\"\" disabled>\n                          Velg\n                        </option>\n                        {formRequest.result &&\n                          formRequest.result.items.map(({ pt, conceptId }) => (\n                            <option value={conceptId} key={pt.term}>\n                              {pt.term}\n                            </option>\n                          ))}\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {/*<input type=\"submit\" value=\"Søk etter legemiddel\" />*/}\n              <DrugListComponent\n                genericUrl={fetchGenericUrl}\n                commercialUrl={fetchCommercial}\n              />\n              <p>{fetchGenericUrl}</p>\n              <p>{fetchIntendedSites}</p>\n            </form>\n          )}\n        </div>\n        <div className=\"col-3 col-md-2\">\n          <div className=\"d-flex h-100 align-items-center justify-content-center\">\n            {searchRequest.loading && <Loading />}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-3 col-md-8\">\n            {searchRequest.error && (\n              <Error>{searchRequest.error.message}</Error>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport Search from \"./pages/Search\";\n\nexport const useQueryParams = () => {\n  return new URLSearchParams(useLocation().search);\n};\n\nconst App = () => {\n  const queryParams = useQueryParams();\n  const scope = queryParams.get(\"scope\") || \"\";\n  return <Search scope={scope} />;\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { QueryParamProvider } from \"use-query-params\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Router>\n    <QueryParamProvider ReactRouterRoute={Route}>\n      <App />\n    </QueryParamProvider>\n  </Router>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}